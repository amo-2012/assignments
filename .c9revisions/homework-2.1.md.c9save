{"ts":1347574965764,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# Homework 2.1 - Ever wonder what all these signs say?\n\nFor Homework 1.1, you found a nice project on Github, forked it into your own account, and cloned it into your Cloud 9 IDE account. For this assignment, pick one or more PHP files from your project (you DID pick a PHP project, didn't you?) and identify some of the following items of PHP grammar and vocabulary that we talked about in class, including but not limited to:\n\n* Variables: $name\n* Constants: E_USER_WARNING, MY_AWESOME_CONSTANT\n* Arithmetic operators: addition (+), subtraction (-)\n* Functions: array_slice(), do_something_amazing()\n\nWhen you find one, identify the file and line number in this file, below the instrcutions per the example below. Try to make the indentation match the original file (yes, copy and paste), even if that means there's NO indentation. Crazy PHPers.\n\nYou don't have to identify EVERYTHING in a given line or even in a single file, but you may get extra points if you're thorough or make a survey of more than one file... And you might get docked if you make too much work for me. ;)\n\nWhen you're done editing this file, save it, commit it, and push it to your forked version of the \"assignments\" repo. Then open a pull request back to the original. YOU WILL NOT GET CREDIT IF YOU DO NOT OPEN A PULL REQUEST!\n\nmy_github_user/my_repository/path/to/file.php:3\n```php\n    if ( MY_AWESOME_CONSTANT )\n    // Constant: MY_AWESOME_CONSTANT\n```\n\nmy_github_user/my_repository/path/to/file.php:42\n```php\n    $name = do_something_amazing() + 1;\n    // Variable: $name\n    // Function: do_something_amazing()\n```\n\n"]],"start1":0,"start2":0,"length1":0,"length2":1599}]],"length":1599}
{"contributors":[],"silentsave":false,"ts":1348278456230,"patch":[[{"diffs":[[0,"account."],[-1," "],[1,"\n"],[0,"For this"]],"start1":179,"start2":179,"length1":17,"length2":17},{"diffs":[[0,"gnment, "],[1,"\n"],[0,"pick one"]],"start1":201,"start2":201,"length1":16,"length2":17},{"diffs":[[0,"abulary "],[1,"\n"],[0,"that we "]],"start1":360,"start2":360,"length1":16,"length2":17},{"diffs":[[0," below. "],[1,"\n"],[0,"Try to m"]],"start1":710,"start2":710,"length1":16,"length2":17},{"diffs":[[0,"oints if"],[-1," "],[1,"\n"],[0,"you're t"]],"start1":955,"start2":955,"length1":17,"length2":17},{"diffs":[[0,"\" repo. "],[1,"\n"],[0,"Then ope"]],"start1":1195,"start2":1195,"length1":16,"length2":17},{"diffs":[[0,"zing()\n```\n\n"],[1,"\nmy_github_user/amo-2012/php-2.git/dbf2mysql/dbf2csv.cli.php:18\n\n```php\n        $info         = dbase_get_header_info($db);\n       //$info  a variable \n       //$db  a variable\n       // = an operator\n```\nmy_github_user/amo-2012/php-2.git/dbf2mysql/dbf2csv.cli.php:30      \n```php\n        echo implode($delimetr, $line);\n    // $delimeter - a variable \n    // implode() - a function\n```\n      \n     \n      \n        \nmy_github_user/amo-2012/php-2.git dbf2mysql/dbf2mysql.cli.php 18:     \n```\n\n    if($argc >= 2) {\n\n    $table = 'table';\n    $iconvFrom = '866';\n    $iconvTo = 'UTF-8';\n    $delimetr = ',';\n    \n   // lines 5-10    \n   //if variable called $argc has a value greater than or equal to 2, then display the data in a table, as 866 (?), im charset UTF-8, \n   //use a coma to separate the data within the table.\n   // there are more this function does but is not ID'd here.\n```\n\n"]],"start1":1591,"start2":1591,"length1":12,"length2":900}]],"length":2491,"saved":false}
